1.
Create a function digitSum(int n). Where n>0.
Return the sum of digit for n.
For Example - If n=345 then digitSum() must return 12 i.e. 3+4+5 = 12
If n=909 then digitSum() must return 18 i.e. 9+0+9 = 18

ans:
// SPDX-License-Identifier: aIT
pragma solidity >=0.5.0 <0.9.0;

contract day1 {
    
 function digitSum( int256 n) public view returns(int256){
    n =345;
    int256 sum=0;
   while (n >0){
    int256 a = (n % 10);
    sum = sum +a ;
     n= n/10;
     }
     return sum;
 }
}

2.
Task

There is a series, S , where the next term is the sum of pervious three terms. 
Given the first three terms of the series, a ,b ,c and respectively, you have to output the nth term of the series.
S(n) = a for n=1
S(n) = b for n=2
S(n) = c for n=3
S(n) = S(n-1) + S(n-2) + S(n-3) for n>3
Create a function nthTerm(uint n, uint a, uint b, uint c) where n is the nth term to find and a,b,c are the three terms of the series.
For Example - If n=5 a=1 b=2 c=3 then nthTerm() must return 11 as S(1) = 1 S(2) = 2
S(3) = 3 S(4) = S(3) + S(2) + S(1) = 1+2+3 = 6 S(5) = S(4) + S(3) + S(2) = 6 + 3 + 2 = 11

ans:
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

contract Day2 {
   function nthTeem(uint256 n,uint256 a, uint256 b, uint256 c) public pure returns(uint256){
    uint256 [100]  memory arrayTeam ;
    uint256 i;
    arrayTeam[1]= a;
    arrayTeam[2]=b;
    arrayTeam[3] =c;

    for(i=3 ; i<= n; i++){
         
      arrayTeam[i]= arrayTeam[i-1]+arrayTeam[i-2]+arrayTeam[i-3];
    }
   return arrayTeam[n];
  }
}
3.
A prime number is a whole number greater than 1. It has exactly two factors, that is, 1 and the number itself.
Create a function prime(uint n) . This prime() will check whether n is a prime number or not.
If n is a prime number then prime() returns 1 and n is not prime then prime() must return 0.
For Example - If n=103 then prime() must return 1 as 103 is a prime number. If n=200 then prime() must return 0 as 200 is not a prime number.

ans :
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

contract Day3 {
  
      function prime(uint256 n) public pure returns(uint256)
      {
          if (n <= 1) {
            return 0;
          }
       for(uint256 i=2; i<n; i++){
       if(n % i == 0){
       return 0;
       }
       else{
       return 1;
       } 
     }
 }
}

4.
A palindrome number is a number that is same after reverse. For example 545, 151, 34543 etc.
Create a function palindrome(uint n) . Thispalindrome() will check whether n is a palindrome or not.
If n is a palindrome then palindrome() returns 1 and n is not palindrome then palindrome() must return 0.
For Example - If n=545 then palindrome() must return 1. If n=123 then palindrome() must return 0.

ans:
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

contract Day5 {
    
    function palindrome(uint256 n) public pure returns(uint256){

     uint256 reverse = 0;
     uint256 remainder ;
     uint256 original ;

     original=n;
    while(n != 0){
         remainder=(n % 10);
         reverse = reverse * 10 + remainder;
         n /=10;
       }

       if(reverse == original){
       return 1;}
       else{
       return 0;
       }
    }
   
}


5.
Create a function reverseDigit(uint n) . This reverseDigit() will do the reversal of the number n.
For Example - If n=123 then reverseDigit() must return 321. If n=5342 then reverseDigit() must return 2435.

ans:
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

contract Day6 {

   function reverseDigit(uint n) public pure returns(uint){

     uint reverse = 0;
     uint original ;
     uint remainder;

     original =n;

     while(n !=0){
     remainder = n%10;
     reverse = (reverse *10 ) +remainder;
     n /=10;
     }
     return reverse;
   }
}

6.
Create a function reverseArray(array, length of array) . This reverseArray() will take two arguments - a dynamic uint type array and length of the array.
The reverseArray() will reverse the array. For Example - If array =[2,5,9,11,1] then reverseArray() will return [1,11,9,5,2] If array =[90,20,30,10] then reverseArray() will return [10,30,20,90]
ans:
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

contract Day1 {
    function reverseArray(uint256[] memory arr,uint256 len) public pure returns(uint256[] memory){
     uint temp;

     for(uint256 i =0; i< len/2; i ++){
      temp =arr[i];
      arr[i] = arr[len-i-1];
      arr[len-i-1] =temp;
      }
      return arr;
  }
}

7.
Create a function even(array, length of array) . This even() will take two arguments - a dynamic uint type array and length of the array.
The even() will multiply each element of array with 2. For Example - If array =[2,5,11,1] then even() will return [4,10,22,2,] If array =[1,3,5,7] then even() will return [2,6,10,14]

ans
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

contract Day2 {
    
    function even( uint256[] memory arr, uint256 len) public pure returns(uint256[] memory){

      
        for(uint256 i = 0; i< len; i++)
        {

        arr[i]= 2*arr[i];

    }

    return arr;
}
}


8.
Create a function sumarray(array, length of array) . This sumarray() will take two arguments - a dynamic int type array and length of the array.
The sumarray() will add all elements of an array. For Example - If array =[4, 2, 3, 4] then sumarray() will return 13 i.e. 4+2+3+4 = 13 If array =[1, 2, 3] then sumarray() will return 6 i.e. 1+2+3 = 6
ans
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

contract Day6 {
   function sumarray(uint256[] memory arr, uint256 len) public pure returns(uint256){
      uint256 sum =0;
      for( uint256 i =0; i< len; i++){
            sum += arr[i];
            }
            return sum;
     }

}


9.
Find the sum of the series 1 + x + x^2+ x^3+ .. + x^n

Create a function expression(x,n) .
The expression() will find the sum of the above expression. For Example - If x =2 n = 3 then expression() will return 15. If x =5 n = 1 then expression() will return 6.
ans.
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

contract Day1 {
    
    function expression( uint256 x, uint256 n ) public view returns(uint256){

         uint256 sum =1;
         uint256 m=1;
    for(uint256 i =0; i<n; i++)
    {
         m= m*x;
         sum = sum+m; 
    }
        return sum;
  }
}
10.
Task Create a structure -> struct Book { string title; string author; uint256 book_id; }

Create two functions a) setBook(title(string),author(string),id(uint)) - To set the book title, author and id given in the structure. b) getBook() - To get the book title,author and id.


ans;
// SPDX-License-Identifier: MIT

pragma solidity >=0.5.0 <0.9.0;

contract Day4 {

       struct Book {
       string title;
       string author;
       uint256 id;
       }
     Book book;
    function setBook (string memory title, string memory author,uint256  id) public {
      book = Book(title, author, id);
      }

    function getBook() public view returns(string memory, string memory,uint) {
    return (book.title, book.author,book.id);
   }
  }
  
11.
Task Create a structure -> struct Book { string title; string author; uint256 book_id; }

Create "Book type" dynamic array. This "Book type" array will contain different types of Book.
Create a counter( initialised by 1) which increases every time when a Book is added to the "Book type" array. This counter will act as a id for the Books added in the "Book type" array. Every Book in the "Book type" array will have a unique id.
Create two functions a) setBook(title(string),author(string),id(uint)) - To set the book title, author and id given in the "Book type" array. b) getBook(id(uint)) - To get the book title,author and id of the Book whoose id is passed as an argument.


ans:
// SPDX-License-Identifier: MIT

pragma solidity >=0.5.0 <0.9.0;

contract Day5 {
   
  struct Book {
       string title;
       string author;
       uint256 book_id;
       }
     Book[5] book;

     uint256 i =1;

    function setBook (string memory title, string memory author,uint256  book_id) public {
      book[i] = Book(title, author, book_id);
      i++;
      }

    function getBook(uint256 _i) public view returns(string memory, string memory,uint256) {

     return (book[_i].title, book[_i].author, book[_i].book_id);

    }
   
}

12.
Task Create a structure -> struct Student { string name; uint256[3] marks; }
Create two functions 
a) set(name of student, marks in maths,marks in science,marks in english) - To set the name and marks of a student in marks array.
b) get() - To get the name,marks in maths,marks in science and marks in english of the student. Note - Function will be public.

ans:
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;
contract Day6 {

  struct Student {
       string name;
       uint256[3] marks;
       }
     Student student;

    function set (string memory _name, uint256  maths, uint256 science, uint256 english) public {
             
             uint256 i=0 ;
             student.name = _name;
             student.marks[i] =maths;
             i++;
             student.marks[i]=science;
             i++;
             student.marks[i]=english;
      }

    function get() public view returns(string memory, uint256, uint256,uint256) {
        
    return (
         student.name,
         student.marks[0],
         student.marks[1],
         student.marks[2]
         )
    }  
  } 


13.
Task Create an -> enum House { SMALL, MEDIUM, LARGE }

Create a variable of enum type.
Create a function setLarge(). This will set the value of the enum type variable (created at step 1) with LARGE.
Create a function getChoice() which will return the value of the enum type variable (created at step 1) .

ans;
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

contract Day1 {
     enum House { 
     SMALL, 
     MEDIUM, 
     LARGE }

      House choice;

      function setLarge () public{
      choice = House.LARGE;
      }

      function getChoice() public view returns(House){
      return choice;
      }
}
